name: Pull Request Testing

on:
  pull_request:
    branches: [ "master" ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          
      - name: Checkout base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git checkout ${{ github.event.pull_request.base.ref }}
          git checkout ${{ github.event.pull_request.head.ref }}
          
      - name: Check for merge conflicts
        id: conflict-check
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Try to merge base branch into PR branch
          if git merge origin/${{ github.event.pull_request.base.ref }} --no-commit --no-ff; then
            echo "has-conflicts=false" >> $GITHUB_OUTPUT
            echo "MERGE_CONFLICTS=false" >> $GITHUB_ENV
            git merge --abort
          else
            echo "has-conflicts=true" >> $GITHUB_OUTPUT
            echo "MERGE_CONFLICTS=true" >> $GITHUB_ENV
            git merge --abort
          fi
          
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run tests
        run: ./gradlew clean test --no-daemon --build-cache
        env:
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs='-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError'"
          
      - name: Build JAR
        run: ./gradlew shadowJar --no-daemon --build-cache
        
      - name: Run quick security scan
        run: ./gradlew dependencyCheckAnalyze --no-daemon --build-cache
        continue-on-error: true
        
      - name: Upload PR build artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-build-${{ github.event.number }}
          path: build/libs/*.jar
          retention-days: 7
          
      - name: Comment PR with build results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            let comment = `## 🔍 PR Build Summary\n\n`;
            comment += `**Build Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}\n`;
            comment += `**Merge Conflicts:** ${{ steps.conflict-check.outputs.has-conflicts == 'true' && '⚠️ Detected' || '✅ None' }}\n`;
            comment += `**PR Number:** #${{ github.event.number }}\n`;
            comment += `**Commit:** ${{ github.event.pull_request.head.sha }}\n\n`;
            
            if ('${{ steps.conflict-check.outputs.has-conflicts }}' === 'true') {
              comment += `### ⚠️ Merge Conflicts Detected\n`;
              comment += `This PR has conflicts with the base branch. Please resolve them before merging.\n\n`;
            }
            
            comment += `### 📊 Build Details\n`;
            comment += `- **Tests:** Executed\n`;
            comment += `- **Security Scan:** Performed\n`;
            comment += `- **JAR Build:** ${{ job.status == 'success' && 'Success' || 'Failed' }}\n\n`;
            
            comment += `### 🔗 Links\n`;
            comment += `- [Build Log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            comment += `- [Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }})\n`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Build Summary')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  conflict-analysis:
    name: Conflict Analysis
    runs-on: ubuntu-latest
    needs: pr-validation
    if: always()
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          
      - name: Analyze merge conflicts
        id: analyze-conflicts
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch the base branch
          git fetch origin ${{ github.event.pull_request.base.ref }}
          
          # Try to merge and capture conflict information
          if git merge origin/${{ github.event.pull_request.base.ref }} --no-commit --no-ff; then
            echo "has-conflicts=false" >> $GITHUB_OUTPUT
            echo "conflict-files=" >> $GITHUB_OUTPUT
            git merge --abort
          else
            echo "has-conflicts=true" >> $GITHUB_OUTPUT
            
            # Get list of conflicted files
            CONFLICT_FILES=$(git diff --name-only --diff-filter=U | tr '\n' ',' | sed 's/,$//')
            echo "conflict-files=${CONFLICT_FILES}" >> $GITHUB_OUTPUT
            
            # Get conflict details
            mkdir -p conflict-analysis
            git status --porcelain | grep "^UU" > conflict-analysis/conflicts.txt || echo "No conflicts detected in status" > conflict-analysis/conflicts.txt
            
            git merge --abort
          fi
          
      - name: Generate conflict resolution guide
        if: steps.analyze-conflicts.outputs.has-conflicts == 'true'
        run: |
          mkdir -p conflict-analysis
          
          cat > conflict-analysis/resolution-guide.md << 'EOF'
          # 🔧 Merge Conflict Resolution Guide
          
          This PR has merge conflicts that need to be resolved manually.
          
          ## Conflicted Files
          ${{ steps.analyze-conflicts.outputs.conflict-files }}
          
          ## Resolution Steps
          
          ### Option 1: Using GitHub Web Interface
          1. Click on the "Resolve conflicts" button in the PR
          2. Edit the conflicted files directly in the browser
          3. Mark conflicts as resolved
          4. Commit the changes
          
          ### Option 2: Using Command Line
          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd ${{ github.repository }}
          
          # Checkout the PR branch
          git checkout ${{ github.event.pull_request.head.ref }}
          
          # Merge the base branch
          git merge origin/${{ github.event.pull_request.base.ref }}
          
          # Resolve conflicts manually in your editor
          # After resolving, add the files
          git add .
          
          # Commit the resolution
          git commit -m "Resolve merge conflicts"
          
          # Push the changes
          git push origin ${{ github.event.pull_request.head.ref }}
          ```
          
          ### Option 3: Using VS Code
          1. Open the repository in VS Code
          2. Checkout the PR branch
          3. Use the built-in merge conflict resolver
          4. Commit and push the changes
          
          ## Common Conflict Patterns
          
          - **Import conflicts**: Usually safe to accept both imports
          - **Formatting conflicts**: Use consistent formatting
          - **Functional conflicts**: Requires manual review and testing
          
          ## Need Help?
          - Check the [Git documentation](https://git-scm.com/docs/git-merge)
          - Ask for help in the PR comments
          - Use `git status` to see which files need attention
          EOF
          
      - name: Upload conflict analysis
        if: steps.analyze-conflicts.outputs.has-conflicts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: conflict-analysis-${{ github.event.number }}
          path: conflict-analysis/
          retention-days: 30
          
      - name: Comment with conflict analysis
        if: steps.analyze-conflicts.outputs.has-conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictFiles = '${{ steps.analyze-conflicts.outputs.conflict-files }}';
            const fileList = conflictFiles ? conflictFiles.split(',').map(f => `- \`${f}\``).join('\n') : 'Unable to determine conflicted files';
            
            const comment = `## ⚠️ Merge Conflicts Detected
            
            This PR has merge conflicts that need to be resolved before it can be merged.
            
            ### 📁 Conflicted Files:
            ${fileList}
            
            ### 🔧 Resolution Options:
            
            **Option 1: GitHub Web Interface**
            - Click the "Resolve conflicts" button above
            - Edit files directly in the browser
            
            **Option 2: Command Line**
            \`\`\`bash
            git checkout ${{ github.event.pull_request.head.ref }}
            git merge origin/${{ github.event.pull_request.base.ref }}
            # Resolve conflicts manually
            git add .
            git commit -m "Resolve merge conflicts"
            git push origin ${{ github.event.pull_request.head.ref }}
            \`\`\`
            
            **Option 3: VS Code**
            - Use the built-in merge conflict resolver
            - Commit and push changes
            
            ### 📊 Conflict Analysis
            A detailed resolution guide has been uploaded as an artifact in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            
            ### 🆘 Need Help?
            - Review the conflict analysis artifact
            - Check the Git documentation
            - Ask questions in the PR comments
            
            Once conflicts are resolved, the PR will be automatically re-validated.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
      - name: Comment when no conflicts
        if: steps.analyze-conflicts.outputs.has-conflicts == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ✅ No Merge Conflicts
            
            This PR can be merged cleanly with the base branch.
            
            ### 📊 Merge Analysis
            - **Status:** No conflicts detected
            - **Base Branch:** ${{ github.event.pull_request.base.ref }}
            - **PR Branch:** ${{ github.event.pull_request.head.ref }}
            - **Mergeable:** Yes
            
            The PR is ready for review and can be merged when approved.`;
            
            // Find existing conflict comment and update it
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              (comment.body.includes('Merge Conflicts Detected') || comment.body.includes('No Merge Conflicts'))
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
