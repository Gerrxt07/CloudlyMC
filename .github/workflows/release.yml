name: Create Release

on:
  push:
    branches: [ "master" ]
    # Only run the workflow if changes happen in these files or directories:
    paths:
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'gradle/**'
      - 'app/src/**'
      - '*.gradle.kts'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean shadowJar --no-daemon --build-cache
        env:
          # Optimize Gradle performance
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs='-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError'"

      - name: Find built JAR and extract version
        id: find-jar
        run: |
          JAR_FILE=$(ls -t build/libs/cloudly*.jar | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No cloudly JAR file found in build/libs/"
            exit 1
          fi
          
          JAR_NAME=$(basename "$JAR_FILE")
          # Extract version from JAR filename (e.g., cloudly-1.0.0-alpha.jar -> 1.0.0-alpha)
          VERSION=$(echo "$JAR_NAME" | sed 's/^cloudly-//' | sed 's/\.jar$//')
          
          echo "jar-file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release-name=Cloudly $VERSION" >> $GITHUB_OUTPUT
          
          echo "Found JAR file: $JAR_FILE"
          echo "Version: $VERSION"
          echo "Release name: Cloudly $VERSION"

      - name: Get previous release tag
        id: get-previous-tag
        run: |
          # Get current commit SHA
          CURRENT_SHA="${{ github.sha }}"
          echo "Current commit: $CURRENT_SHA"
          
          # Find all version tags that do NOT point to the current commit
          PREVIOUS_TAG=""
          for tag in $(git tag -l "v*" --sort=-version:refname); do
            TAG_SHA=$(git rev-list -n 1 "$tag")
            if [ "$TAG_SHA" != "$CURRENT_SHA" ]; then
              PREVIOUS_TAG="$tag"
              echo "Found previous tag: $tag (points to $TAG_SHA)"
              break
            else
              echo "Skipping tag $tag (points to current commit $TAG_SHA)"
            fi
          done
          
          # If no previous tag found, this is the first release
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous release tag found - this appears to be the first release"
            echo "first-release=true" >> $GITHUB_OUTPUT
            echo "previous-tag=" >> $GITHUB_OUTPUT
          else
            echo "first-release=false" >> $GITHUB_OUTPUT
            echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          fi
          
          echo "Previous reference for comparison: $PREVIOUS_TAG"

      - name: Generate detailed changelog
        id: generate-changelog
        run: |
          PREVIOUS_TAG="${{ steps.get-previous-tag.outputs.previous-tag }}"
          CURRENT_SHA="${{ github.sha }}"
          IS_FIRST_RELEASE="${{ steps.get-previous-tag.outputs.first-release }}"
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_SHA"
          echo "Is first release: $IS_FIRST_RELEASE"
          
          # Get commits since last release
          if [ "$IS_FIRST_RELEASE" = "true" ]; then
            echo "This is the first release - including all commits"
            COMMITS=$(git log --pretty=format:"%h|%s|%an|%ad" --date=short)
          else
            COMMITS=$(git log --pretty=format:"%h|%s|%an|%ad" --date=short "$PREVIOUS_TAG..$CURRENT_SHA")
          fi
          
          # Initialize changelog sections
          FEATURES=""
          FIXES=""
          IMPROVEMENTS=""
          CHORES=""
          BREAKING=""
          OTHER=""
          
          # Process each commit
          while IFS='|' read -r hash subject author date; do
            # Skip empty lines
            [ -z "$hash" ] && continue
            
            # Map Git author names to GitHub usernames
            case "$author" in
              "Gerrit Schlinkmann")
                github_user="gerrxt07"
                ;;
              "gerrit")
                github_user="gerrxt07"
                ;;
              *)
                github_user="$author"
                ;;
            esac
            
            # Format commit line
            COMMIT_LINE="- $subject ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) - @${github_user}"
            
            # Categorize based on commit message
            case "$subject" in
              feat:*|feature:*|add:*|new:*)
                FEATURES="$FEATURES$COMMIT_LINE"$'\n'
                ;;
              fix:*|bugfix:*|patch:*)
                FIXES="$FIXES$COMMIT_LINE"$'\n'
                ;;
              improve:*|enhancement:*|optimize:*|perf:*)
                IMPROVEMENTS="$IMPROVEMENTS$COMMIT_LINE"$'\n'
                ;;
              chore:*|build:*|ci:*|docs:*|style:*|refactor:*)
                CHORES="$CHORES$COMMIT_LINE"$'\n'
                ;;
              breaking:*|"BREAKING CHANGE"*|break:*)
                BREAKING="$BREAKING$COMMIT_LINE"$'\n'
                ;;
              *)
                OTHER="$OTHER$COMMIT_LINE"$'\n'
                ;;
            esac
          done <<< "$COMMITS"
          
          # Build changelog
          CHANGELOG=""
          
          if [ -n "$BREAKING" ]; then
            CHANGELOG="$CHANGELOG## 🚨 Breaking Changes"$'\n'"$BREAKING"$'\n'
          fi
          
          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG## ✨ New Features"$'\n'"$FEATURES"$'\n'
          fi
          
          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG## 🐛 Bug Fixes"$'\n'"$FIXES"$'\n'
          fi
          
          if [ -n "$IMPROVEMENTS" ]; then
            CHANGELOG="$CHANGELOG## 🚀 Improvements"$'\n'"$IMPROVEMENTS"$'\n'
          fi
          
          if [ -n "$CHORES" ]; then
            CHANGELOG="$CHANGELOG## 🔧 Maintenance"$'\n'"$CHORES"$'\n'
          fi
          
          if [ -n "$OTHER" ]; then
            CHANGELOG="$CHANGELOG## 📝 Other Changes"$'\n'"$OTHER"$'\n'
          fi
          
          # If no categorized changes, show all commits under general changes
          if [ -z "$BREAKING$FEATURES$FIXES$IMPROVEMENTS$CHORES$OTHER" ]; then
            CHANGELOG="$CHANGELOG## 📝 Changes"$'\n'"No specific changes categorized."$'\n'
          fi
          
          # Save changelog to file for multiline output
          echo "$CHANGELOG" > changelog.md
          echo "changelog-file=changelog.md" >> $GITHUB_OUTPUT
          
          # Save changelog content as GitHub Actions output variable using heredoc delimiter
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          echo "Generated changelog:"
          cat changelog.md

      - name: Check if release already exists
        id: check-release
        run: |
          if gh release view "v${{ steps.find-jar.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.find-jar.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.find-jar.outputs.version }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release body
        id: generate-release-body
        run: |
          IS_FIRST_RELEASE="${{ steps.get-previous-tag.outputs.first-release }}"
          PREVIOUS_TAG="${{ steps.get-previous-tag.outputs.previous-tag }}"
          CURRENT_VERSION="v${{ steps.find-jar.outputs.version }}"
          
          # Generate the release body
          RELEASE_BODY="## Cloudly ${{ steps.find-jar.outputs.version }}
          
          ${{ steps.generate-changelog.outputs.changelog }}
          
          ---
          
          ### 📦 Installation
          1. Download the \`${{ steps.find-jar.outputs.jar-name }}\` file below
          2. Place it in your server's plugins folder
          3. Restart your server
          
          ### 📋 Release Information"
          
          if [ "$IS_FIRST_RELEASE" = "true" ]; then
            RELEASE_BODY="$RELEASE_BODY
          - **Release Type**: 🎉 Initial release
          - **View Changes**: [All commits in this release](https://github.com/${{ github.repository }}/commits/$CURRENT_VERSION)"
          else
            RELEASE_BODY="$RELEASE_BODY
          - **Release Type**: 🔄 Update from $PREVIOUS_TAG
          - **Full Changelog**: [Compare $PREVIOUS_TAG...$CURRENT_VERSION](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_VERSION)"
          fi
          
          # Save release body to file for multiline output
          echo "$RELEASE_BODY" > release-body.md
          echo "release-body-file=release-body.md" >> $GITHUB_OUTPUT
          
          # Save release body content as GitHub Actions output variable using heredoc delimiter
          {
            echo 'release-body<<EOF'
            echo "$RELEASE_BODY"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          echo "Generated release body:"
          cat release-body.md

      - name: Create Release
        if: steps.check-release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.find-jar.outputs.version }}"
          name: "${{ steps.find-jar.outputs.release-name }}"
          body: ${{ steps.generate-release-body.outputs.release-body }}
          files: |
            ${{ steps.find-jar.outputs.jar-file }}
          draft: false
          prerelease: ${{ contains(steps.find-jar.outputs.version, 'alpha') || contains(steps.find-jar.outputs.version, 'beta') || contains(steps.find-jar.outputs.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release already exists
        if: steps.check-release.outputs.exists == 'true'
        run: |
          echo "::notice::Release v${{ steps.find-jar.outputs.version }} already exists. Skipping release creation."
