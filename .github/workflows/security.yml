name: Security Analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '30 3 * * 2'  # Weekly security scan on Tuesday at 3:30 AM

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json
          
      - name: Upload TruffleHog results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trufflehog-results
          path: |
            trufflehog-results.json
          retention-days: 30

  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Detekt (Kotlin SAST)
        run: |
          ./gradlew detekt --build-cache --no-daemon
        continue-on-error: true
        
      - name: Upload Detekt results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: detekt-results
          path: |
            build/reports/detekt/
          retention-days: 30
          
      - name: Run Semgrep SAST
        run: |
          # Install semgrep
          pip install semgrep
          
          # Run semgrep with SARIF output
          semgrep --config=p/security-audit --config=p/secrets --config=p/owasp-top-ten --config=p/kotlin --sarif --output=semgrep.sarif . || true
          
          # Also generate JSON output for debugging
          semgrep --config=p/security-audit --config=p/secrets --config=p/owasp-top-ten --config=p/kotlin --json --output=semgrep.json . || true
          
          # Ensure SARIF file exists
          if [ ! -f "semgrep.sarif" ]; then
            echo "Creating empty SARIF file..."
            cat > semgrep.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Semgrep",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
          
          # Validate SARIF file
          echo "SARIF file contents:"
          cat semgrep.sarif
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
          
      - name: Generate Semgrep SARIF
        if: always()
        run: |
          # Check if semgrep generated any output files
          if [ -f "semgrep.json" ]; then
            echo "Found semgrep.json, converting to SARIF..."
            # Install semgrep if not already available
            pip install semgrep
            # Convert JSON to SARIF
            semgrep --config=p/security-audit --config=p/secrets --config=p/owasp-top-ten --config=p/kotlin --sarif --output=semgrep.sarif .
          elif [ -f "semgrep.sarif" ]; then
            echo "SARIF file already exists"
          else
            echo "No Semgrep output found, creating empty SARIF file..."
            cat > semgrep.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Semgrep",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
          
      - name: Upload Semgrep results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          
      - name: Upload Semgrep results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: |
            semgrep.sarif
            semgrep.json
          retention-days: 30